//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Package/VAT.Input/Runtime/Desktop/DesktopInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace VAT.Input.Desktop
{
    public partial class @DesktopInputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @DesktopInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""DesktopInputActions"",
    ""maps"": [
        {
            ""name"": ""Desktop"",
            ""id"": ""5c2a0f27-81ba-49a9-b447-8f293dfc0ba2"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""b475cc59-1ce1-4fe7-aa3b-7975fe194d9c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d7d93cbf-14de-47ae-b291-4e7afd3c4556"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8927507c-7abd-4a63-80b8-8005b4ef181b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a2ce8907-10b1-4a74-9926-a9aac3935f29"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""051ab015-571c-4c54-ad6a-94b32f2a0bb8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""09500370-4a95-48df-aa80-97adbaf455fe"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Desktop
            m_Desktop = asset.FindActionMap("Desktop", throwIfNotFound: true);
            m_Desktop_Movement = m_Desktop.FindAction("Movement", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Desktop
        private readonly InputActionMap m_Desktop;
        private IDesktopActions m_DesktopActionsCallbackInterface;
        private readonly InputAction m_Desktop_Movement;
        public struct DesktopActions
        {
            private @DesktopInputActions m_Wrapper;
            public DesktopActions(@DesktopInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_Desktop_Movement;
            public InputActionMap Get() { return m_Wrapper.m_Desktop; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DesktopActions set) { return set.Get(); }
            public void SetCallbacks(IDesktopActions instance)
            {
                if (m_Wrapper.m_DesktopActionsCallbackInterface != null)
                {
                    @Movement.started -= m_Wrapper.m_DesktopActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_DesktopActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_DesktopActionsCallbackInterface.OnMovement;
                }
                m_Wrapper.m_DesktopActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                }
            }
        }
        public DesktopActions @Desktop => new DesktopActions(this);
        public interface IDesktopActions
        {
            void OnMovement(InputAction.CallbackContext context);
        }
    }
}
