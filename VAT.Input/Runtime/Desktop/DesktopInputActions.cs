//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Package/VAT.Input/Runtime/Desktop/DesktopInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace VAT.Input.Desktop
{
    public partial class @DesktopInputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @DesktopInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""DesktopInputActions"",
    ""maps"": [
        {
            ""name"": ""Desktop"",
            ""id"": ""744695b2-b289-439b-ae55-47c3ec6d0362"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""d25c1806-11f6-47a9-bc92-31326231d0e6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""98e05abc-89be-42e6-a55d-20412f14fd56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""cfd4a371-228f-4de5-b470-5842b9d0da35"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""dea587af-0f09-4b07-a6d0-699812a7a43f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c3de7829-4ce8-40bc-80f1-48c884dcfaf4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""eed65052-241a-4eb9-89d5-d138771c6883"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8298a817-d1e6-4ec0-8fe3-5a0cc5ac0a6e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0fc687c7-b440-46a8-b9e7-99cb0b43b999"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""aa473c42-c13d-4a10-9751-a5239b9e005b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e7532010-1377-4860-8d27-ac3b8dd3b219"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Desktop
            m_Desktop = asset.FindActionMap("Desktop", throwIfNotFound: true);
            m_Desktop_Movement = m_Desktop.FindAction("Movement", throwIfNotFound: true);
            m_Desktop_Jump = m_Desktop.FindAction("Jump", throwIfNotFound: true);
            m_Desktop_Look = m_Desktop.FindAction("Look", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Desktop
        private readonly InputActionMap m_Desktop;
        private IDesktopActions m_DesktopActionsCallbackInterface;
        private readonly InputAction m_Desktop_Movement;
        private readonly InputAction m_Desktop_Jump;
        private readonly InputAction m_Desktop_Look;
        public struct DesktopActions
        {
            private @DesktopInputActions m_Wrapper;
            public DesktopActions(@DesktopInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_Desktop_Movement;
            public InputAction @Jump => m_Wrapper.m_Desktop_Jump;
            public InputAction @Look => m_Wrapper.m_Desktop_Look;
            public InputActionMap Get() { return m_Wrapper.m_Desktop; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DesktopActions set) { return set.Get(); }
            public void SetCallbacks(IDesktopActions instance)
            {
                if (m_Wrapper.m_DesktopActionsCallbackInterface != null)
                {
                    @Movement.started -= m_Wrapper.m_DesktopActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_DesktopActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_DesktopActionsCallbackInterface.OnMovement;
                    @Jump.started -= m_Wrapper.m_DesktopActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_DesktopActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_DesktopActionsCallbackInterface.OnJump;
                    @Look.started -= m_Wrapper.m_DesktopActionsCallbackInterface.OnLook;
                    @Look.performed -= m_Wrapper.m_DesktopActionsCallbackInterface.OnLook;
                    @Look.canceled -= m_Wrapper.m_DesktopActionsCallbackInterface.OnLook;
                }
                m_Wrapper.m_DesktopActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                    @Look.started += instance.OnLook;
                    @Look.performed += instance.OnLook;
                    @Look.canceled += instance.OnLook;
                }
            }
        }
        public DesktopActions @Desktop => new DesktopActions(this);
        public interface IDesktopActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnLook(InputAction.CallbackContext context);
        }
    }
}
